import streamlit as st
import csv
import re
import PyPDF2
import xml.etree.ElementTree as ET
from openpyxl import load_workbook
from io import StringIO, BytesIO

st.set_page_config(page_title="Avid Locator Generator", layout="centered")

def normalizza_timecode(raw):
    raw = raw.strip().lower()

    if re.match(r"^\d{1,3}['‚Ä≤m]$", raw):
        minuti = int(re.findall(r"\d+", raw)[0])
        return f"00:{minuti:02}:00:00"

    if re.match(r"^\d{1,2}m\d{1,2}s$", raw.replace(" ", "")):
        match = re.findall(r"\d+", raw)
        minuti, secondi = map(int, match)
        return f"00:{minuti:02}:{secondi:02}:00"

    if re.match(r"^\d{1,2}[:.]\d{1,2}$", raw):
        minuti, secondi = re.split(r"[:.]", raw)
        return f"00:{int(minuti):02}:{int(secondi):02}:00"

    if raw.isdigit():
        secondi = int(raw)
        minuti, secondi = divmod(secondi, 60)
        return f"00:{minuti:02}:{secondi:02}:00"

    if re.match(r"^\d{2}:\d{2}:\d{2}:\d{2}$", raw):
        return raw

    return "00:00:00:00"

def parse_lines(lines):
    locators = []
    for line in lines:
        parts = re.split(r'\t|;', line.strip())
        if len(parts) >= 2:
            raw_timecode = parts[0].strip()
            comment = parts[1].strip()
            timecode = normalizza_timecode(raw_timecode)
            locators.append((timecode, comment))
    return locators

def read_txt(file):
    content = file.read().decode("utf-8")
    lines = content.splitlines()
    return parse_lines(lines)

def read_pdf(file):
    reader = PyPDF2.PdfReader(file)
    text = ""
    for page in reader.pages:
        text += page.extract_text()
    lines = text.splitlines()
    return parse_lines(lines)

def read_xml(file):
    tree = ET.parse(file)
    root = tree.getroot()
    locators = []
    for loc in root.findall(".//locator"):
        raw_timecode = loc.findtext("timecode") or ""
        comment = loc.findtext("comment") or ""
        timecode = normalizza_timecode(raw_timecode.strip())
        locators.append((timecode, comment.strip()))
    return locators

def read_xlsx(file):
    wb = load_workbook(file)
    ws = wb.active
    locators = []
    for row in ws.iter_rows(min_row=2, values_only=True):
        raw_timecode, comment = row[:2]
        if raw_timecode and comment:
            timecode = normalizza_timecode(str(raw_timecode))
            locators.append((timecode, str(comment).strip()))
    return locators

def generate_output(locators, clip_name="MODIFICHE RETE"):
    output = StringIO()
    writer = csv.writer(output, delimiter='\t')
    for timecode, comment in locators:
        writer.writerow([clip_name, timecode, "V1", "RED", comment, "1"])
    return output.getvalue()

# --- UI ---
st.title("üé¨ Avid Locator Generator")
st.markdown("Carica un file `.txt`, `.pdf`, `.xml`, o `.xlsx` con timecode e commenti.")

uploaded_file = st.file_uploader("Seleziona un file", type=["txt", "pdf", "xml", "xlsx"])

if uploaded_file:
    try:
        ext = uploaded_file.name.split(".")[-1].lower()
        if ext == "txt":
            locators = read_txt(uploaded_file)
        elif ext == "pdf":
            locators = read_pdf(uploaded_file)
        elif ext == "xml":
            locators = read_xml(uploaded_file)
        elif ext == "xlsx":
            locators = read_xlsx(uploaded_file)
        else:
            st.error("Formato file non supportato.")
            locators = []

        if locators:
            result = generate_output(locators)
            st.success("‚úÖ File Avid Locator generato!")

            st.download_button("üì• Scarica file", result, file_name="avid_locators.txt", mime="text/plain")
            st.text_area("Anteprima", result, height=200)
        else:
            st.warning("‚ö†Ô∏è Nessun dato valido trovato nel file.")
    except Exception as e:
        st.error(f"‚ùå Errore: {str(e)}")
